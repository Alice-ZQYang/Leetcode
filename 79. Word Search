[79. Word Search](https://leetcode.com/problems/word-search/)

Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

Example:

board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]

Given word = "ABCCED", return true.
Given word = "SEE", return true.
Given word = "ABCB", return false.

## solution 

题目要看懂，这个单词必须在原来的矩阵中是相连的 (``"can be"``)

用dfs的方法，其实不用visited也可以，只要把已经找过的的位置的值设为一个word中不含有的字符

**复杂度**
- Time: $O(m \times n \times 4^k)$, m和n分别为矩阵长和宽，k是word的长度
``f(n) = 4 * f(n - 1)``
- Space: $O()$ ?

```java
class Solution {
    int[][] dirs = new int[][]{{1, 0}, {0, 1}, {0, -1}, {-1, 0}}; // right, up, down, left
    int row, col;
    public boolean exist(char[][] board, String word) {
        if (word.length() == 0) return false;
        
        row = board.length;
        col = board[0].length;
        
        for (int i=0; i< board.length; i++) {
            for (int j=0; j < board[0].length; j++) {
                if (dfs(board, word, i, j, 0, new boolean[row][col])) return true;
            }
        }
        return false;
    }
    
    public boolean dfs(char[][] board, String word, int x, int y, int index, boolean[][] visited) {
        if (index == word.length() - 1) {
            if (board[x][y] == word.charAt(index)) return true;
            else return false;
        }
        
        if (board[x][y] != word.charAt(index)) return false;
        
        visited[x][y] = true;
        
        for (int[] dir: dirs) {
            int new_x = x + dir[0], new_y = y + dir[1];
            // invalid postion
            if (new_x < 0 || new_x >=  row || new_y < 0 || new_y >= col)
                continue;
            // visited postion
            if (visited[new_x][new_y])
                continue;
            
            if (dfs(board, word, new_x, new_y, index+1, visited)) 
                return true;
        }
        
        visited[x][y] = false;
        
        return false;
    }
}
```
